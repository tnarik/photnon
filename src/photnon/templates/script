#!/usr/bin/env python3
import json
import codecs
import os
from collections import Counter

# For every digest-based group, generate merged JSON metadata:
#	Tags: are joined without duplications, as a sorted list.
#	Description: do they match? If there is a single one, use that one
#	AltDescriptions: In case there is more than one not-matching description
#   Title: Use from the JSON or the alternative filenames.
#.  AltTitles: In case there is more than one not-matching title

count = 0
count_nj = 0
count_t = 0

{%- for i, group in digest_groups %}
tags = set()
descriptions = []
titles = []
{% set ns = namespace(main_file='') -%}
{% for j, e in group.iterrows() -%}
{% if e['has_json'] -%}
count += 1
count_t += 1
if os.path.exists("{{ e['fullpath'] }}.json"):
	with codecs.open( "{{ e['fullpath'] }}.json", 'r','utf-8-sig') as f:
		js = json.load(f)
		tags.update( js['Tags'] if isinstance(js['Tags'], list)
			 else js['Tags'].split(' ') )
		descriptions.append(js['Description'])
		{% if e['persist_version'] != KEPT_MARK -%}
		titles.append(js['Title'])
		{% else -%}
		{% set ns.main_file = e['name'] -%}
		{% endif %}
{% else -%}
count_nj += 1 #{{group|length}}
count_t += 1 #{{group|length}}
{% if e['persist_version'] != KEPT_MARK -%}
titles.append("{{ e['name'] }}")
{% else -%}
{% set ns.main_file = e['name'] -%}
{% endif -%}
{% endif -%}
{% endfor -%}

metadata = {'Tags': sorted(list(tags)),
			'Description': '',
			'Title': '' }

descriptions = Counter(descriptions)
del descriptions['']
if (len(descriptions) >= 1):
	metadata['Description'] = descriptions.most_common(1)[0][0]
	if (len(descriptions) > 1):
		metadata['AltDescriptions'] = sorted([d[0] for d in descriptions.most_common()[1:]])

titles = Counter(titles)
del titles['']
if len(titles) >= 1:
	metadata['Title'] = titles.most_common(1)[0][0]
	if len(titles) > 1:
		metadata['AltTitles'] = sorted([t[0] for t in titles.most_common()[1:]])

print("MERGED '{{ ns.main_file }}' = ", metadata)
{% endfor %}


print('{{nojson_num}} files without JSON')
print('{{json_num}} files with some JSON')
print('{{digest_groups|length}} digests processed')
print("{} / {} = {} files in total".format(count, count_nj, count_t))